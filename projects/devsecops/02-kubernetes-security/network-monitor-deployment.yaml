apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-monitor
  namespace: security
  labels:
    app: network-monitor
    security-tier: monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: network-monitor
  template:
    metadata:
      labels:
        app: network-monitor
        security-tier: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: network-monitor
        image: network-monitor:devsecops
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: LOG_LEVEL
          value: "INFO"
        - name: PYTHONUNBUFFERED
          value: "1"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: reports
          mountPath: /app/reports
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: reports
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: network-monitor-service
  namespace: security
  labels:
    app: network-monitor
spec:
  selector:
    app: network-monitor
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: Namespace
metadata:
  name: security
  labels:
    name: security
    purpose: security-monitoring 