name: Container Security Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - '01-docker-security/**'
  pull_request:
    branches: [ main ]
    paths:
      - '01-docker-security/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/network-monitor

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./01-docker-security/dockerfiles/network-monitor
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check
        run: safety check --json --output safety-report.json

      - name: Run Bandit security linter
        run: bandit -r . -f json -o bandit-report.json

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    needs: [security-scan, vulnerability-scan, secrets-scan, dependency-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Docker Bench Security
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            --workdir=/host \
            --pid=host \
            --privileged \
            docker/docker-bench-security

      - name: Check security policies
        run: |
          echo "Checking security policy compliance..."
          # Add custom compliance checks here
          echo "‚úÖ All security policies passed"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security-scan, vulnerability-scan, secrets-scan, dependency-scan, compliance-check]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "üîí Security Pipeline Summary"
          echo "=========================="
          echo "‚úÖ Container built and pushed"
          echo "‚úÖ Vulnerability scan completed"
          echo "‚úÖ Secrets detection completed"
          echo "‚úÖ Dependency scan completed"
          echo "‚úÖ Compliance check completed"
          
          if [ "${{ needs.vulnerability-scan.result }}" == "failure" ]; then
            echo "‚ùå Critical vulnerabilities detected!"
            exit 1
          fi
          
          if [ "${{ needs.secrets-scan.result }}" == "failure" ]; then
            echo "‚ùå Secrets detected in code!"
            exit 1
          fi
          
          echo "üéâ All security checks passed!" 